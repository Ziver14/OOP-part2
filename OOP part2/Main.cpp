#include<iostream>
#include<string>

int main() {
	setlocale(LC_ALL,"ru");

	// Концепции ООП
	// Инструментально реализуемые
	
	//Инкапсуляция - механизм ООП позволяющий объединять данные с методами их обработки,
	// а так же предоставляющий методы сокрытия данных
	//Наследование - "механизм языка который позволяет расширить функционал базового класса путем сужения его специализации"
	// используется только тогда, когда нужно включть полиморфизм
	//Полиморфизм - способ писать программу в линйных аллгоритмах сохраняя динамическое поведение

	//Теоритические
	
	// Абстракция - оставляем только критически важные параметры объекта, необходимые для программы
	// Пересылка сообщений - ООП код начинается с того момента когда внутри программы есть два 
	// разных объекта которые вызывают код друг друга
	// Повторное использование кода-написанный один раз алгоритм, вызывается нужное колличество раз. 
	// 
	// SOLID принципы(позволяют писать более легко поддерживающийся код)
	// 
	// SRP - принцип единственной ответственности, каждый модуль программы должен иметь одну и только одну ответственность
	// OCP - принцип "открытости-закрытости" система должна быть открыта для расширения, но закрыта для изменения существующего кода.
	// LSP - принцип подстановки Барабары Лисков, класс наследники должны строго выполнять контракт класса родителя.  
	// ISP - принцип разделения интерфейсов, у каждого модуля программы должно быть столько же интерфейсов сколько разных категорий 
	// пользователей у него есть
	// DIP - принцип инверсии зависимостей,"не нога бьет табуретку, а табуреретка занет что делать когда ее пнули"
	// классы формируются не исходя из своей деятельности, а от того как ими пользуются.
	//






	return 0;
}

